const cron = require("node-cron");
const dayjs = require("dayjs");
const sendPushNotification = require("./utils/sendPushNotification");
const Reminder = require("./models/reminder");
const Notification = require("./models/notification");
const User = require("./models/users");
const PracticeHistory = require("./models/practiceHistory");
const ExamHistory = require("./models/examHistory");

cron.schedule("* * * * *", async () => {
  const now = dayjs();
  const currentHour = now.hour();
  const currentMinute = now.minute();

  console.log(`üïí Ki·ªÉm tra nh·∫Øc h·ªçc l√∫c ${currentHour}:${currentMinute}`);

  try {
    const usersToNotify = await Reminder.find({
      hour: currentHour,
      minute: currentMinute,
    }).populate("user");

    for (const user of usersToNotify) {
      await sendPushNotification(
        user.user.expoPushToken,
        "‚è∞ Nh·∫Øc h·ªçc b√†i!",
        "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·ªçc b√¢y gi·ªù ƒë√≥!"
      );

      await new Notification({
        title: "‚è∞ Nh·∫Øc h·ªçc b√†i!",
        message: "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·ªçc b√¢y gi·ªù ƒë√≥!",
        user: user.user,
      }).save();
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra l·ªãch nh·∫Øc:", err);
  }
});

// Cron job: Nh·∫Øc nh·ªü h·ªçc t·∫≠p n·∫øu kh√¥ng ho·∫°t ƒë·ªông > 7 ng√†y
cron.schedule("* * * * *", async () => {
  const now = dayjs();
  // const sevenDaysAgo = now.subtract(5, "minute");
  const sevenDaysAgo = now.subtract(7, "day");

  try {
    const users = await User.find();
    for (const user of users) {
      // L·∫•y ho·∫°t ƒë·ªông cu·ªëi c√πng t·ª´ practiceHistory
      const lastPractice = await PracticeHistory.findOne({ user: user._id })
        .sort({ endTime: -1 })
        .select("endTime");
      // L·∫•y ho·∫°t ƒë·ªông cu·ªëi c√πng t·ª´ examHistory
      const lastExam = await ExamHistory.findOne({ user: user._id })
        .sort({ endTime: -1 })
        .select("endTime");

      let lastActive = null;
      if (lastPractice && lastExam) {
        lastActive = dayjs(lastPractice.endTime).isAfter(
          dayjs(lastExam.endTime)
        )
          ? dayjs(lastPractice.endTime)
          : dayjs(lastExam.endTime);
      } else if (lastPractice) {
        lastActive = dayjs(lastPractice.endTime);
      } else if (lastExam) {
        lastActive = dayjs(lastExam.endTime);
      }

      // T√¨m notification nh·∫Øc nh·ªü inactivity g·∫ßn nh·∫•t trong 30 ph√∫t qua
      const lastNoti = await Notification.findOne({
        user: user._id,
        title: "üìö ƒê√£ l√¢u b·∫°n ch∆∞a h·ªçc!",
      })
        .sort({ createdAt: -1 })
        .select("createdAt");

      // Ch·ªâ g·ª≠i n·∫øu ƒë√£ t·ª´ng ho·∫°t ƒë·ªông, ƒë√£ qu√° 30 ph√∫t ch∆∞a ho·∫°t ƒë·ªông,
      // v√† ch∆∞a g·ª≠i th√¥ng b√°o trong 30 ph√∫t qua
      if (
        lastActive &&
        lastActive.isBefore(sevenDaysAgo) &&
        (!lastNoti || dayjs(lastNoti.createdAt).isBefore(sevenDaysAgo))
      ) {
        if (user.expoPushToken) {
          await sendPushNotification(
            user.expoPushToken,
            "üìö ƒê√£ l√¢u b·∫°n ch∆∞a h·ªçc!",
            "H√£y quay l·∫°i luy·ªán t·∫≠p ƒë·ªÉ kh√¥ng qu√™n ki·∫øn th·ª©c nh√©!"
          );
        }
        await new Notification({
          title: "üìö ƒê√£ l√¢u b·∫°n ch∆∞a h·ªçc!",
          message: "H√£y quay l·∫°i luy·ªán t·∫≠p ƒë·ªÉ kh√¥ng qu√™n ki·∫øn th·ª©c nh√©!",
          user: user._id,
        }).save();
        // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t lastInactiveNotification n·ªØa
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra nh·∫Øc nh·ªü h·ªçc t·∫≠p:", err);
  }
});
